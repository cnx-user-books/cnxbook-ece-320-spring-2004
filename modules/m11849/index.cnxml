<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Digital Transmitter: Introduction to Frequency Shift Keying </title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>1394c91a-1efc-469e-97a3-e8c078033e20</md:uuid>
</metadata>


  <content>

    <section id="fsk">
      <title>Frequency Shift Keying</title>
      <para id="para1">
        <term>Frequency Shift Keying</term> (<term>FSK</term>) is a
        scheme to transmit digital information across an analog
        channel.  Binary data bits are grouped into blocks of a fixed
        size, and each block is represented by a unique carrier
        frequency, called a <term>symbol</term>, to be sent across the
        channel.  <footnote id="idm5502432">The receiver then looks at the
        recovered symbol frequency to determine which block of bits
        was sent and converts it back to the appropriate binary
        data.</footnote> This requires having a unique symbol for each
        possible combination of data bits in a block.  In this
        laboratory exercise each symbol represents a two-bit block;
        therefore, there will be four different symbols.
      </para>

      <para id="para2">
        The carrier frequency is kept constant over some number of
        samples known as the symbol period 
        (<m:math>
          <m:ci>
            <m:msub>
              <m:mi>T</m:mi>
              <m:mi>symb</m:mi>
            </m:msub>
          </m:ci>
        </m:math>).  The symbol rate, defined as 
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>F</m:mi>
              <m:mi>symb</m:mi>
            </m:msub>
          </m:ci>
        </m:math>, is a fraction of the board's sampling rate, 
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>F</m:mi>
              <m:mi>s</m:mi>
            </m:msub>
          </m:ci>
        </m:math>.  For our sampling rate of 44.1 kHz and a symbol
        period of 32, the symbol rate is 44.1k/32 symbols per second.
      </para>
      
      <figure id="fig1">
        <media id="idp1161856" alt=""><image src="../../media/trans.png" mime-type="image/png"/></media>
        <caption>Pseudo-noise sequence generator and FSK
        transmitter.</caption>
      </figure>
    </section>

    <section id="pn-gen">
      <title>Pseudo-Noise Sequence Generator</title>
      <para id="para3">
        The input bits to the transmitter are provided by the special
        shift-register, called a <term>pseudo-noise sequence
        generator</term> (<term>PN generator</term>), on the left side
        of <link target-id="fig1"/>.  A PN generator produces a sequence
        of bits that appears random.  The PN sequence will repeat with
        period
        <m:math>
          <m:apply>
            <m:minus/>
            <m:apply>
              <m:power/>
              <m:cn>2</m:cn>
              <m:ci>B</m:ci>
            </m:apply>
            <m:cn>1</m:cn>
          </m:apply>
        </m:math>, where 
	<m:math>
	  <m:ci>B</m:ci>
	</m:math> is the width in bits of the shift register.  A more
        detailed diagram of the PN generator alone appears in <link target-id="fig2"/>.
      </para>
      
      <figure id="fig2">
        <media id="idm5633440" alt=""><image src="../../media/pn-gen.png" mime-type="image/png"/></media>
        <caption>PN generator.</caption>
      </figure>
      
      <para id="para4">
        As shown in <link target-id="fig2"/>, the PN generator is simply
        a shift-register and XOR gate.  Bits 14 and 15 of the
        shift-register are XORed together and the result is shifted
        into the lowest bit of the register.  This lowest bit is
        the output of the PN generator.
      </para>
      
      <para id="para5">
        The PN generator is a useful source of random data bits for
        system testing.  We can simulate the bit sequence that would
        be transmitted by a user as the random bits generated by the
        PN generator.  Since communication systems tend to randomize
        the bits seen by the transmission scheme so that bandwidth can
        be efficiently utilized, the PN generator is a good data
        model.<footnote id="idp1112128">PN generators have other
        applications in communications, notably in the Code Division
        Multiple Access schemes used by cellular telephones.</footnote>
      </para>
    </section>

    <section id="s-to-p">
      <title>Series-to-Parallel Conversion</title>

      <para id="para6">
        The shift-register produces one output bit at a time.  Because
        each symbol the system transmits will encode two bits, we
        require the series-to-parallel conversion to group the output
        bits from the shift-register into blocks of two bits so that
        they can be mapped to a symbol.
      </para>
    </section>

    <section id="freq_lookup">
      <title>Frequency Look-up Table</title>
      
      <para id="para7">
        This is responsible for mapping blocks of bits to one of four
        frequencies as shown in <link target-id="fig1"/>. Each possible
        two-bit block of data from the series-to-parallel conversion
        is mapped to a different carrier frequency
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>ω</m:mi>
              <m:mi>i</m:mi>
            </m:msub>
          </m:ci>
        </m:math>
        <note type="note" id="idm5378608">Note that the subscript 
	  <m:math>
	    <m:ci>i</m:ci> 
	  </m:math> denotes a symbol's index in the transmitted
	  signal; <foreign>i.e.</foreign>, the first symbol sent has
	  index
	  <m:math>
	    <m:apply>
	      <m:eq/>
	      <m:ci>i</m:ci>
	      <m:cn>1</m:cn>
	    </m:apply>
	  </m:math>, the second symbol sent has index 
	  <m:math>
	    <m:apply>
	      <m:eq/>
	      <m:ci>i</m:ci>
	      <m:cn>2</m:cn>
	    </m:apply>
	  </m:math>, and so on.  Therefore,
          <m:math>
            <m:ci>
              <m:msub>
                <m:mi>ω</m:mi>
                <m:mi>i</m:mi>
              </m:msub>
            </m:ci>
          </m:math> denotes the frequency and 
          <m:math>
            <m:ci>
              <m:msub>
                <m:mi>φ</m:mi>
                <m:mi>i</m:mi>
              </m:msub>
            </m:ci>
          </m:math> denotes the phase offset of the 
	  <m:math>
	    <m:ci><m:msup> 
		<m:mi>i</m:mi> 
		<m:mi>th</m:mi>
	      </m:msup></m:ci> 
	  </m:math> transmitted symbol.</note> These frequencies are
	then used to generate the waveforms.  The mappings for this
	assignment are given in <link target-id="table1"/>.
      </para>
      
      <table frame="all" id="table1" summary="">
        <tgroup cols="2" align="right" colsep="1" rowsep="1">
          <thead valign="top">
            <row>
              <entry align="center">Data Chunk</entry>
              <entry align="center">Carrier Frequency 
                <m:math>
                  <m:ci><m:msub>
                      <m:mi>ω</m:mi>
		      <m:mi>i</m:mi>
                    </m:msub></m:ci>
                </m:math></entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry align="center">00</entry>
              <entry align="center">
                <m:math>
                  <m:apply>
                    <m:divide/>
                    <m:apply>
                      <m:times/>
                      <m:cn>9</m:cn>
                      <m:pi/>
                    </m:apply>
                    <m:cn>32</m:cn>
                  </m:apply>
                </m:math>
              </entry>
            </row>
            <row>
              <entry align="center">01</entry>
              <entry align="center">
                <m:math>
                  <m:apply>
                    <m:divide/>
                    <m:apply>
                      <m:times/>
                      <m:cn>13</m:cn>
                      <m:pi/>
                    </m:apply>
                    <m:cn>32</m:cn>
                  </m:apply>
                </m:math>
              </entry>
            </row>
            <row>
              <entry align="center">11</entry>
              <entry align="center">
                <m:math>
                  <m:apply>
                    <m:divide/>
                    <m:apply>
                      <m:times/>
                      <m:cn>17</m:cn>
                      <m:pi/>
                    </m:apply>
                    <m:cn>32</m:cn>
                  </m:apply>
                </m:math>
              </entry>
            </row>
            <row>
              <entry align="center">10</entry>
              <entry align="center">
                <m:math>
                  <m:apply>
                    <m:divide/>
                    <m:apply>
                      <m:times/>
                      <m:cn>21</m:cn>
                      <m:pi/>
                    </m:apply>
                    <m:cn>32</m:cn>
                  </m:apply>
                </m:math>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      
      <para id="para8">
        One way to implement this mapping is by using a look-up
        table. The two-bit data block can be interpreted as an offset
        into a frequency table where we have stored the possible
        transmission frequencies.  Note that since each frequency
        mapping defines a symbol, this mapping is done at the symbol
        rate
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>F</m:mi>
              <m:mi>symb</m:mi>
            </m:msub>
          </m:ci>
        </m:math>, or once for every
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>T</m:mi>
              <m:mi>symb</m:mi>
            </m:msub>
          </m:ci>
        </m:math> DSP samples.
      </para>
      
      <para id="para9">
        The symbol bit assignments are such that any two adjacent
        frequencies map to data blocks that differ by only one bit.
        This assignment is called <term>Gray coding</term> and helps
        reduce the number of bit errors made in the event of a
        received symbol error.
      </para>
    </section>

    <section id="phase_cont">
      <title>Phase Continuity</title>
      
      <para id="para10">
        In order to minimize the bandwidth used by the transmitted
        signal, you should ensure that the phase of your transmitted
        waveform is continuous between symbols; i.e., the beginning
        phase of any symbol must be equal to the ending phase of the
        previous symbol. For instance, if a symbol of frequency
        <m:math>
          <m:apply>
            <m:divide/>
            <m:apply>
              <m:times/>
              <m:cn>9</m:cn>
              <m:pi/>
            </m:apply>
            <m:cn>32</m:cn>
          </m:apply>
        </m:math> begins at phase 0, the symbol will end 31 output
        samples later at phase
        <m:math>
          <m:apply>
            <m:times/>
            <m:cn>31</m:cn>
            <m:apply>
              <m:divide/>
              <m:apply>
                <m:times/>
                <m:cn>9</m:cn>
                <m:pi/>
              </m:apply>
              <m:cn>32</m:cn>
            </m:apply>
          </m:apply>
        </m:math>.  To preserve phase continuity, the next output sample must
        be at phase
        <m:math>
          <m:apply>
            <m:times/>
            <m:cn>32</m:cn>
            <m:apply>
              <m:divide/>
              <m:apply>
                <m:times/>
                <m:cn>9</m:cn>
                <m:pi/>
              </m:apply>
              <m:cn>32</m:cn>
            </m:apply>
          </m:apply>
        </m:math>, which is equivalent to phase 
	<m:math>
	  <m:pi/>
	</m:math>.  Therefore, the next symbol, whatever its
        frequency, must begin at phase  
	<m:math>
	  <m:pi/>
	</m:math>.  For each symbol, you must choose
        <m:math>
          <m:ci>
            <m:msub>
              <m:mi>φ</m:mi>
              <m:mi>i</m:mi>
            </m:msub>
          </m:ci>
        </m:math> in the expression 
        <m:math>
          <m:apply>
            <m:sin/>
            <m:apply>
              <m:plus/>
              <m:apply>
                <m:times/>
                <m:ci>
                  <m:msub>
                    <m:mi>ω</m:mi>
                    <m:mi>i</m:mi>
                  </m:msub>
                </m:ci>
                <m:ci>n</m:ci>
              </m:apply>
              <m:ci>
                <m:msub>
                  <m:mi>φ</m:mi>
                  <m:mi>i</m:mi>
                </m:msub>
              </m:ci>
            </m:apply>
          </m:apply>
        </m:math> to create this continuity.
      </para>
    </section>
  </content>
</document>
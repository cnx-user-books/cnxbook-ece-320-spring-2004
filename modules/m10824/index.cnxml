<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Speech Processing: LPC Exercise in MATLAB</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>9bd6eba0-0418-4abc-af4f-278ab5da66f7</md:uuid>
</metadata>




  <content>
    <section id="section2">
      <title>MATLAB Exercises</title>



      <para id="prob1">
	First, take a simple signal (<foreign>e.g.</foreign>, one
	period of a sinusoid at some frequency) and plot its
	autocorrelation sequence for appropriate values of
	<m:math>
	  <m:ci>l</m:ci>
	</m:math>. You may wish to use the <code>xcorr</code> MATLAB
	function to compare with your own version of this function.
	At what time shift 
	<m:math>
	  <m:ci>l</m:ci>
	</m:math> is
	<m:math>
	  <m:apply>
	    <m:ci type="fn" class="discrete">
	      <m:msub>
		<m:mi>r</m:mi>
		<m:mrow>
		  <m:mi>s</m:mi>
		  <m:mi>s</m:mi>
		</m:mrow>
	      </m:msub>
	    </m:ci>
	    <m:ci>l</m:ci>
	  </m:apply>
	</m:math> maximized and why?  Is there any symmetry in
	<m:math>
	  <m:apply>
	    <m:ci type="fn" class="discrete">
	      <m:msub>
		<m:mi>r</m:mi>
		<m:mrow>
		  <m:mi>s</m:mi>
		  <m:mi>s</m:mi>
		</m:mrow>
	      </m:msub>
	    </m:ci>
	    <m:ci>l</m:ci>
	  </m:apply>
	</m:math>?  What does
	<m:math>
	  <m:apply>
	    <m:ci type="fn" class="discrete">
	      <m:msub>
		<m:mi>r</m:mi>
		<m:mrow>
		  <m:mi>s</m:mi>
		  <m:mi>s</m:mi>
		</m:mrow>
	      </m:msub>
	    </m:ci>
	    <m:ci>l</m:ci>
	  </m:apply>
	</m:math> look like for periodic signals?
      </para>

      <para id="prob2">
	Next, write your own version of the Levinson-Durbin algorithm
	in MATLAB.  Note that MATLAB uses indexing from
	<m:math>
	  <m:cn>1</m:cn>
	</m:math> rather than
	<m:math>
	  <m:cn>0</m:cn>
	</m:math>.  One way to resolve this problem is to start the
	loop with
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>i</m:ci>
	    <m:cn>2</m:cn>
	  </m:apply>
	</m:math>, then shift the variables
	<m:math>
	  <m:ci>k</m:ci>
	</m:math>,
	<m:math>
	  <m:ci>E</m:ci>
	</m:math>,
	<m:math>
	  <m:ci>Î±</m:ci>
	</m:math>, and
	<m:math>
	  <m:ci>
	    <m:msub>
	      <m:mi>r</m:mi>
	      <m:mrow>
		<m:mi>s</m:mi>
		<m:mi>s</m:mi>
	      </m:mrow>
	    </m:msub>
	  </m:ci>
	</m:math> to start at 
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>i</m:ci>
	    <m:cn>1</m:cn>
	  </m:apply>
	</m:math> and 
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>j</m:ci>
	    <m:cn>1</m:cn>
	  </m:apply>
	</m:math>. Be careful with indices such as 
	<m:math>
	  <m:apply>
	    <m:minus/>
	    <m:ci>i</m:ci>
	    <m:ci>j</m:ci>
	  </m:apply>
	</m:math>, since these could 
	still be 
	<m:math>
	  <m:cn>0</m:cn>
	</m:math>.  
      </para>

      <para id="para11">
	Apply your algorithm to a 
	<m:math>
	  <m:cn>20</m:cn>
	</m:math>-
	<m:math>
	  <m:cn>30</m:cn>
	</m:math> ms segment of a speech signal.  Use a microphone to
	record <code>.wav</code> audio files on the PC using Sound
	Recorder or a similar application.  Typically, a sample rate
	of 
	<m:math>
	  <m:cn>8</m:cn>
	</m:math> kHz is a good choice for voice signals, which are
	approximately bandlimited to 
	<m:math>
	  <m:cn>4</m:cn>
	</m:math>
	kHz.  You will use these audio files to test algorithms in
	MATLAB.  The functions <code>wavread</code>,
	<code>wavwrite</code>, <code>sound</code> will help you read,
	write and play audio files in MATLAB:
	
      </para>

      <para id="para12">
	The output of the algorithm is the prediction coefficients

 	<m:math>
	  <m:ci>
	    <m:msub>
	      <m:mi>a</m:mi>
	      <m:mi>k</m:mi>
	    </m:msub>
	  </m:ci>
	</m:math> (usually about 
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>P</m:ci>
	    <m:cn>10</m:cn>
	  </m:apply>
	</m:math> coefficients is sufficient), which represent the
	speech segment containing significantly more samples.  The LPC
	coefficients are thus a compressed representation of the
	original speech segment, and we take advantage of this by
	saving or transmitting the LPC coefficients instead of the
	speech samples.  Compare the coefficients generated by your
	function with those generated by the <code>levinson</code> or
	<code>lpc</code> functions available in the MATLAB toolbox.
	Next, plot the frequency response of the IIR model represented
	by the LPC coefficients (see <link document="m10482" target-id="eq5">Speech Processing: Theory of LPC Analysis and
	Synthesis</link>).  What is the fundamental frequency of the
	speech segment?  Is there any similarity in the prediction
	coefficients for different
	<m:math>
	  <m:cn>20</m:cn>
	</m:math>-
	<m:math>
	  <m:cn>30</m:cn>
	</m:math>
	ms segments of the same vowel sound?  How could the prediction
	coefficients be used for recognition?
      </para>
    </section>
    
  </content>
  
</document>
<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Speech Processing: LPC Exercise on TI TMS320C54x</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>bfcf2ecb-8012-4ab5-bfd4-8ebcccfff32b</md:uuid>
</metadata>




  <content>
    
    <section id="section3">
      <title>Implementation</title>

      <para id="para13">
	The sample rate on the 6-channel 
	DSP boards is fixed at 
	<m:math>
	  <m:cn>44.1</m:cn>
	</m:math> kHz, so decimate by a factor of 
	<m:math>
	  <m:cn>5</m:cn>
	</m:math> to achieve the sample rate of
	<m:math>
	  <m:cn>8.82</m:cn>
	</m:math> kHz, which is more appropriate for speech
	processing.
      </para>

      <para id="para14">
	Compute the autocorrelation or 
	autocovariance coefficients of 
	<m:math>
	  <m:cn>256</m:cn>
	</m:math>-sample blocks of input samples from a function
	generator for time shifts
	<m:math>
	  <m:apply>
            <m:eq/>
            <m:ci>l</m:ci>
            <m:set>
	      <m:cn>0</m:cn>
	      <m:cn>1</m:cn>
	      <m:ci>â€¦</m:ci>
	      <m:cn>15</m:cn>
            </m:set>
	  </m:apply>
	</m:math> (<foreign>i.e.</foreign>, for 
	<m:math>
	  <m:apply>
	    <m:eq/>
	    <m:ci>P</m:ci>
	    <m:cn>15</m:cn>
	  </m:apply>
	</m:math>) and 
	display these on the oscilloscope with a trigger.  (You may zero out 
	the other 
	<m:math>
	  <m:cn>240</m:cn>
	</m:math> output samples to fill up the
	<m:math>
	  <m:cn>256</m:cn>
	</m:math>-sample block).  For computing the autocorrelation,
	you will have to use memory to record the last
	<m:math>
	  <m:cn>15</m:cn>
	</m:math> samples of the input due to the overlap between
	adjacent blocks.  Compare the output on the oscilloscope with
	simulation results from MATLAB.
      </para>

      <para id="para15">
	The next step is to use a speech signal as the input to your
	system.  Use a microphone as input to the original <link resource="thru6.asm">thru6.asm</link> code and adjust the gains in
	your system until the output uses most of the dynamic range of
	the system without saturating.  Now, to capture and analyze a
	small segment of speech, write code that determines the start
	of a speech signal in the microphone input, records a few
	seconds of speech, and computes the autocorrelation or
	autocovariance coefficients.  The start of a speech signal can
	be determined by comparing the input to some noise threshold;
	experiment to find a good value.  For recording large segments
	of speech, you may need to use external memory. Refer to <link document="m10823">Core File: Accessing External Memory on TI
	TMS320C54x</link> for more information.
      </para>

      <para id="para16">
	Finally, incorporate your code which computes autocorrelation
	or autocovariance coefficients with the code which takes
	speech input and compare the results seen on the oscilloscope
	to those generated by MATLAB.
      </para>
      <section id="optional">
	<title>Integer division (optional)</title>      
	<para id="para17">
	  In order to implement the Levinson-Durbin algorithm, you
	  will need to use integer division to do <link document="m10482" target-id="para5point7">Step 1</link> of the
	  algorithm.  Refer to the <cite url="http://www-s.ti.com/sc/psheets/spru173/spru173.pdf"><cite-title>Applications
	  Guide</cite-title></cite> and the <code>subc</code> instruction
	  for a routine that performs integer division.
	</para>
      </section>
    </section>

  </content>
  
</document>
<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml" xmlns:bib="http://bibtexml.sf.net/">
  <title>Communications: Using Direct Digital Synthesis</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>ecfb99a8-0b91-492e-890b-b0f1d423ffdf</md:uuid>
</metadata>


  <content>
    <section id="new0">
      <title>Introduction</title>
      <para id="introduction">
	<term>Direct Digital Synthesis</term> (<term>DDS</term>) is a
	method for generating a desired waveform (such as a sine wave)
	by using the technique described in <link target-id="fig1"/> below.
      </para>

      <figure id="fig1">
	<media id="idm5038592" alt=""><image src="../../media/fig1.png" mime-type="image/png"/></media>
	<caption>Direct digital synthesis (DDS) (<cite target-id="reference1"><cite-title>Couch</cite-title></cite>)</caption>
      </figure>

      <para id="para2">
	Quantized samples of a desired waveform are stored in the memory
	of the microprocessor system.  This desired waveform can then be
	generated by "playing out" the stored words into the
	digital-to-analog converter.  The frequency of this waveform is
	determined simply by how fast the stored words are read from
	memory, and is thus programmable.  Likewise, the phase and
	amplitude of the generated waveform are programmable.
      </para>

      <para id="para3">
	The DDS technique is replacing analog circuits in many
	applications.  For example, it is used in higher-priced
	communication receivers to generate local oscillator signals.
	It can also be used to generate sounds in electronic pipe organs
	and music synthesizers.  Another application is its use by lab
	instrument manufacturers to generate output waveforms in
	function generators and arbitrary waveform generators (<cite target-id="reference1"><cite-title>Couch</cite-title></cite>).
      </para>

      <para id="para4">
	In this lab you will familiarize yourself with the capabilities
	of the Analog Devices AD9854 DDS.  The DDS board is installed
	between the 6-channel card and the DSP card at some (not all)
	lab stations.  You can tell which boxes have them by the way the
	6-channel card sits higher inside the metal box.
      </para>
    </section>
    <section id="fm">
      <title>Frequency Modulation (FM) Radio Exercise</title>

      <para id="para5">
        To get your feet wet and see a demonstration of the DDS,
        perform the following exercise. Copy the files
        <code>FM.asm</code> (downloadable <link target-id="para9">here</link>) and <code>mod.asm</code> from the
        <code>v:\ece320\54x\dds\</code> directory.  Assemble and run
        the frequency modulation (FM) program <code>FM.asm</code>.
        Next, plug an audio source into one of the two DSP input
        channels that you've been using all semester.  If you have a
        CD on you, pop it into the computer and use that.  If not, use
        a music web site on the Internet as your audio source.
        Connect the computer to the DSP by using a male-male audio
        cable and an audio-to-BNC converter box (little blue box),
        both of which are in the lab. The computer has three audio
        outputs on the back; use the middle jack.  Ask your TA if you
        can't find the cable and/or box or don't see how to make the
        connection.  Next, connect a dipole antenna to the output of
        the DDS (port \#1 on the back of the DDS board).  A crude but
        effective dipole antenna can be formed by connecting together
        a few BNC and banana cables in the shape of a <code>T</code>.
        There should be one or two of these concoctions in the
        lab. Once the connections are made, turn on the black receiver
        in the lab, and tune it to 104.9 MHz (wide band FM).  You
        should be able to hear your audio source!  <note type="note" id="idp43984">If your audio sounds distorted, it's most likely
        due to the volume of your audio source being too loud and
        getting clipped by the DSP analog-to-digital converter.</note>
      </para>

      <section id="new1">
	<title>Spectral Copies</title>
	<para id="para6">
	  Spectral Copies: The digital-to-analog converter on the DDS is
	  unfiltered, which means that there is no anti-imaging filter
	  to remove the spectral replicas.  To see this, plug the output
	  of the DDS board directly into the vector signal analyzer
	  (VSA), and observe the spectrum.  Use 104.9 MHz as the center
	  frequency, and set the span wide enough so that you can see
	  the spectra of the replicas to the left and right of the 104.9
	  MHz signal.  Use the marker to find the peaks of the other
	  replicas, and record their frequencies.  Once you've done
	  that, reattach the antenna to the DDS output, and tune the
	  receiver to the frequencies you just recorded.  You should be
	  able to hear your audio on each of the other frequencies.
	  <note type="Note" id="idp2029984"><label>Note</label>The clock rate of the DDS is 60MHz, which corresponds to
	  <m:math>
	    <m:apply>
	      <m:times/>
	      <m:cn>2</m:cn>
	      <m:pi/>
	    </m:apply>
	  </m:math> in digital frequency.</note> Therefore, the 104.9
	  MHz signal you just listened to is roughly equivalent to
	  <m:math>
	    <m:apply>
	      <m:divide/>
	      <m:apply>
		<m:times/>
		<m:cn>7</m:cn>
		<m:pi/>
	      </m:apply>
	      <m:cn>2</m:cn>
	    </m:apply>
	  </m:math> in digital frequency. What are the digital
	  frequencies of the other copies you saw on the VSA?
	</para>
      </section>
    </section>

    <section id="sec2">
      <title>How to use the DDS</title>

      <para id="para7">
        The DDS has several different modes of operation: single-tone,
        unramped <term>Frequency Shift Keying</term>
        (<term>FSK</term>), ramped FSK, chirp, and <term>Binary Phase
        Shift Keying</term> (<term>BPSK</term>).  In this lab we will
        use the DDS in single-tone mode.  Single-tone mode is easy to
        use, and is powerful enough to create many different kinds of
        waveforms, including FM and FSK.
      </para>

      <section id="sec2sub1">
        <title>FM code</title>
        <para id="para7sub1">
          The FM code you just ran (also listed <link target-id="apprendix">here</link>) is fairly
          straightforward. The program first calls the
          <code>radioinit</code> subroutine.  This routine sets the
          DDS to single-tone mode and turns off an inverse-sinc filter
          to conserve power.  Following <code>radioinit</code>, the
          <code>setcarrier</code> subroutine is called.  This routine
          sets the frequency of the DDS output by writing to the two
          most significant 8-bit frequency registers of the 48-bit
          frequency-tuning word on the DDS<footnote id="idp3202256">Communication between the DSP and the DDS is
          done through a parallel bus.</footnote>.  Although the
          frequency-tuning word on the DDS has 48 bits of resolution,
          the upper 16 bits provide us with enough resolution for the
          purposes of this lab, and so we will only be writing to the
          two most significant registers.  See <cite><cite-title>page 26</cite-title></cite> in
          the DDS data sheet for a layout of the frequency-tuning
          word.
	</para>

        <para id="para7sub2">
          To set the carrier frequency, we first need to determine what 
          frequency word has to be written to the frequency registers on
          the DDS.  This can be done using <link target-id="eq1"/>:

          <equation id="eq1">
            <m:math display="block">
              <m:apply>
                <m:eq/>
		<m:ci>Frequency word</m:ci>
		<m:apply>
		  <m:times/>
		  <m:apply>
		    <m:divide/>
		    <m:ci>baseband frequency</m:ci>
		    <m:ci>
		      <m:mrow>
			<m:mn>60</m:mn>
			<m:mo>Â </m:mo>
			<m:mi>MHz</m:mi>
		      </m:mrow>
		    </m:ci>
		  </m:apply>
		  <m:apply>
		    <m:power/>
		    <m:cn>2</m:cn>
		    <m:cn>48</m:cn>
		  </m:apply>
		</m:apply>
              </m:apply>
            </m:math>
          </equation>
          where <term>baseband frequency</term> corresponds to the
          desired frequency that lies in the range of 0-30 MHz.  For
          example, to get the DDS to transmit at 104.9 MHz, you would
          choose the baseband frequency to be 15.1 MHz since 104.9 MHz
          is one of the unfiltered spectral replicas of 15.1 MHz.
          Then, using <link target-id="eq1"/>, the frequency word for
          15.1 MHz (and 104.9 MHz) would be equal to <code>406D 3A06
          D3D4h</code>.  But since we only write to the two most
          significant registers of the frequency-tuning word, we only
          need the first 4 hexadecimal numbers of this result,
          i.e. <code>406Dh</code>.  The first two of those,
          <code>40h</code>, need to get written to the most
          significant 8-bit frequency register, while the second two
          hex numbers, <code>6Dh</code>, need to get written to the
          second-most significant 8-bit frequency register.  This is
          where the <code>40h</code> and <code>6Dh</code> in the
          <code>setcarrier</code> subroutine of the FM code come from.
        </para>

        <para id="para7sub3">
          Writing to the frequency registers is accomplished using the
          <code>portw</code> instruction.  To write to the frequency
          or phase registers on the DDS, the second operand of the
          <code>portw</code> instruction must be
          <code>10xxxxxx</code>, where the lower six bits are the
          address of the specific register to be written to.  The
          address of the most significant frequency register on the
          DDS is <code>04h</code>, and the address of the second most
          significant frequency register on the DDS is
          <code>05h</code> (see <cite><cite-title>page 26</cite-title></cite> in the data
          sheet).  It is important to note that the way our DDS boards
          were built, you will not be allowed to make two consecutive
          writes.  To solve this problem, a subroutine called
          <code>nullop</code> is called to waste some CPU time between
          writes.  <code>nullop</code> does this by simply repeating
          the <code>nop</code> instruction 128 times.
        </para>

        <para id="para7sub4">
          After the program returns from the <code>setcarrier</code>
          subroutine, it enters an infinite loop in which it waits for
          a serial interrupt to occur.  The serial interrupt occurs
          every time a new sample is acquired from one of the two
          input channels and is transmitted to the DSP via the serial
          port.  When the interrupt occurs, an interrupt service
          routine called <code>ANALOG_IFC</code> (see
          <code>core_mod.asm</code> executes and calls the
          <code>handle_sample</code> subroutine.  The
          <code>handle_sample</code> subroutine reads in the acquired
          sample from the serial port and scales that sample so that
          it can be "mapped" to a frequency in the range of Â±75
          kHz<footnote id="idm6576224">In FM radio, the amplitude of the
          message signal being transmitted determines the amount of
          frequency deviation from the carrier frequency of the
          passband signal.  Â±75 kHz is the largest frequency
          deviation allowed.</footnote>.  The scaled sample therefore
          determines the frequency deviation and is added to
          <code>6Dh</code>.  The last step is to write the result to
          the second most significant frequency register so that the
          frequency of the DDS output can be updated.
        </para>
      </section>

      <section id="sec2sub2">
        <title>Programming the Phase</title>
	
        <para id="para7sub5">
          The process for changing the phase of the DDS output is the
          same as it was for changing the frequency of the DDS output.
          To change the phase, you need to write a phase word to a
          phase-adjust register on the DDS.  The phase-adjust register
          is 14 bits wide and is split up into two smaller registers
          that you can write to (see <cite><cite-title>page 26</cite-title></cite> in the data
          sheet).  The upper 6 bits have address <code>00h</code>, and
          the lower 8 bits have address <code>01h</code>.  The phase
          word can be calculated using <link target-id="eq2"/>:

          <equation id="eq2">
            <m:math display="block">
              <m:apply>
                <m:eq/>
		<m:ci>Phase word</m:ci>
		<m:apply>
		  <m:times/>
		  <m:apply>
		    <m:divide/>
		    <m:ci>Carrier phase</m:ci>
		    <m:apply>
		      <m:times/>
		      <m:cn>2</m:cn>
		      <m:pi/>
		    </m:apply>
		  </m:apply>
		  <m:apply>
		    <m:power/>
		    <m:cn>2</m:cn>
		    <m:cn>14</m:cn>
		  </m:apply>
		</m:apply>
              </m:apply>
            </m:math>
          </equation>

          Once you've calculated the phase word, you can write it to
          the DDS using the <code>portw</code> instruction as before.
          Just make sure you use the correct address for the phase
          register.
        </para>
      </section>

      <section id="sect2sub3">
        <title>Programming the Amplitude</title>
        <para id="para7sub6">
          The DDS also allows you to program the amplitude, but this
          functionality is not addressed in this lab.  You will be
          able to implement a digital communication system in ECE320
          without having to program the amplitude.  Interested readers
          are referred to the data sheet.
        </para>
      </section>
    </section>

    <section id="sec3">
      <title>FSK exercise</title>

      <para id="para8">
        Now that you know how to use the DDS in single-tone mode,
        implement a simple FSK system that uses 2 frequencies: 120.005
        MHz, and 120.011 MHz.  You don't need to encode any data for
        this exercise.  In other words, your DDS output should just
        continuously alternate between the two frequency symbols.
        Also, the DDS automatically ensures continuous phase, so you
        won't have to keep track of it.  Use a symbol length of
        approximately 725Î¼s (the same length as your lab 5
        symbols).  Timer interrupts are an elegant way to control the
        symbol lengths, but in this lab we will keep things simple and
        control the symbol lengths by creating a second (longer)
        <code>nullop</code> subroutine and calling it between writes
        to the DDS.  The second <code>nullop</code> subroutine should
        waste approximately 725Î¼s worth of time.  <note type="Note" id="idp165744"><label>Note</label>Since we're not using input or output from the
        DSP, you don't need to use the WaitData or WaitAudio
        macros.</note>
      </para>

      <section id="sec3sub1">
        <title>Testing</title>

        <para id="para8sub1">
          Note that the corresponding baseband frequencies for 120.005
          MHz and 120.011 MHz are 5 kHz, and 11 kHz, respectively.
          Since these baseband frequencies lie within the 22.05 kHz
          bandwidth of the DSP, you will be able to view your FSK
          signal in real time on the oscilloscope
          <emphasis>without</emphasis> the contribution from the
          spectral replicas.  Just feed the output of the DDS into a
          second DSP (the anti-aliasing filter on the DSP will get rid
          of the spectral replicas), and pass it through to the output
          and the scope.  You should be able to verify that there is
          continuous phase between frequency symbols, and that your
          symbol length is approximately 725Î¼s.  You should also
          view the spectrum of your DDS output on the VSA to verify
          that your symbols have the correct frequencies.
        </para>
      </section>
    </section>
    <section id="appendix">
      <title>Appendix</title>
      <para id="para9">
	<link url="http://cnx.rice.edu/modules/m10657/latest/FM.asm">FM.asm</link>
      </para>
    </section>

  </content>
  <bib:file>
    <bib:entry id="reference1">
      <bib:book>
	<bib:author>Leon W. Couch, II</bib:author>
	<bib:title>Digital and Analog Communication Systems</bib:title>
	<bib:publisher>Prentice Hall</bib:publisher>
	<bib:year>1995</bib:year>
	<bib:address>Upper \\ Saddle River, New Jersey, 07458</bib:address>
	<bib:edition>3rd edition</bib:edition>
      </bib:book>
    </bib:entry>
  </bib:file>

</document>